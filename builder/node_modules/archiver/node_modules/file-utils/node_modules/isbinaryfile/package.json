{
  "name": "isbinaryfile",
  "version": "2.0.1",
  "description": "Detects if a file is binary in Node.js. Similar to Perl's -B.",
  "main": "./lib/panino.js",
  "engines": {
    "node": ">=0.6.0"
  },
  "maintainers": [
    {
      "name": "Garen J. Torikian",
      "email": "gjtorikian@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/gjtorikian/isBinaryFile"
  },
  "devDependencies": {
    "mocha": ""
  },
  "scripts": {
    "test": "mocha tests/test.js"
  },
  "readme": "isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary),\nin that:\n\n* it reads the first few thousand bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the\nfile is flagged as binary\n\nAll the logic is also pretty much ported from\n[ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: if the file doesn't exist or it is empty, this function returns `false`.\n\n## Installation\n\n```\nnpm install isbinaryfile\n```\n\n## Usage\n\nIf you pass in one argument, this module assumes it's just the file path, and\nperforms the appropriate file read and stat functionality internally, as sync\noptions:\n\n``` javascript\nvar isBinaryFileSync = require(\"isbinaryfile\");\n\nif (isBinaryFileSync(process.argv[2]))\n  console.log(\"It is!\")\nelse\n  console.log(\"No.\")\n```\n\nTa da.\n\nHowever, if you've already read and `stat()`-ed a file (for some other reason),\nyou can pass in both the file's raw data and the stat's `size` info to save\ntime:\n\n```javascript\nfs.readFile(process.argv[2], function(err, data) {\n  fs.lstat(process.argv[2], function(err, stat) {\n    if (isBinaryFileSync(data, stat.size))\n      console.log(\"It is!\")\n    else\n      console.log(\"No.\")\n  });\n});\n```\n\n### Async\n\nPrevious to version 2.0.0, this program always ran in sync mode. Now, there's\nan async option. Simply pass a function as your second parameter, and isBinaryFile\nwill figure the rest out:\n\n``` javascript\nvar isBinaryFileSync = require(\"isbinaryfile\");\n\nisBinaryFileSync(process.argv[2], function(err, result) {\n  if (err) return console.error(err);\n\n  if (result)\n    console.log(\"It is!\")\n  else\n    console.log(\"No.\")\n}\n```\n\n## Testing\n\nInstall mocha on your machine:\n\n```\nnpm install mocha -g\n```\n\nThen run `npm test`.\n\n# MIT License\n\nCopyright (c) 2013 Garen J. Torikian\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gjtorikian/isBinaryFile/issues"
  },
  "homepage": "https://github.com/gjtorikian/isBinaryFile",
  "_id": "isbinaryfile@2.0.1",
  "dist": {
    "shasum": "7d6ba150cc58be8a3a7a21359a43bbcbf05a3ad1"
  },
  "_from": "isbinaryfile@~2.0.0",
  "_resolved": "https://registry.npmjs.org/isbinaryfile/-/isbinaryfile-2.0.1.tgz"
}
